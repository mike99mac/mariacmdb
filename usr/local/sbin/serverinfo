#!/bin/bash
#
# serverinfo - return hostname, IP addr, num CPUs, GB of memory, architecture, OS, OS version, kernel level 
#
# if any arg is passed, give help
if [ $# != 0 ]; then                       # arg passed
  echo "Name:  serverinfo - return hostname, IP addr, num CPUs, GB of memory, etc." 
  echo "Usage: serverinfo"
  exit 1
fi

# gather info
hostName=`hostname -s`
IPaddr=`ip route get 8.8.8.8 | sed -n '/src/{s/.*src *\([^ ]*\).*/\1/p;q}'`
if [ ${#IPaddr} = 0 ]; then                # empty var
  IPaddr=`curl -4 ifconfig.co`             # try a different way
  if [ ${#IPaddr} = 0 ]; then
    IPaddr="unknown"
  fi
fi
numCPUs=`grep ^processor /proc/cpuinfo | wc -l`
memKB=`cat /proc/meminfo | head -1 | awk '{print $2}'`
let memGB="( $memKB + 524288 ) / (1024 * 1024 )" # round to nearest GB
arch=`arch`                                # hardware platform
case $arch in
  "i686"|"x86_64")
    arch_com="intel"                       # more common word
    ;;
  "aarch64"|"arm64")
    arch_com="arm"
    ;;
  "amd64")
    arch_com="amd"
    ;;
  "s390x")
    arch_com="zlinux"
    ;;
  *)
    arch_com="unknown"    
    ;;
esac

# get application, group, owner, creation data and last pinged if the data exists in /etc/
cd /etc
if [ -s app ]; then                         # file exists and is not empty
  app=`cat app`
else
  app="unknown"
fi
if [ -s grp ]; then  
  grp=`cat grp`
else
  grp="unknown"
fi
if [ -s owner ]; then 
  owner=`cat owner`
else
  owner="unknown"
fi
last_ping=`date +"%y-%m-%d-%H:%M:%S"`       # consider an ssh a ping
if [ -s created ]; then 
  created=`cat created`
else
  created="unknown"
fi
os=`uname -s`                               # kernel name
distro=`head -1 /etc/os-release | sed -e 's/NAME=//g' -e 's/PRETTY_NAME=//g' -e 's/"//g'`
if [ ${#distro} = 0 ]; then                 # empty var
  distro="unknown"
else
  distro_ver=`grep ^VERSION_ID /etc/os-release | awk -F'"' '{print $2}'`
  distro="$distro $distro_ver"
fi 
kern_ver=`uname -v | sed 's/PREEMPT_DYNAMIC //g'` 
kern_rel=`uname -r`                          
rootfsFull=`df -h / | tail -1 | awk '{print $5}' | sed 's/%//g'`
echo -n "$hostName,$IPaddr,$numCPUs,$memGB,$arch,$arch_com,$os,$distro,$kern_ver,$kern_rel,$rootfsFull,$app,$grp,$owner,$last_ping,$created"
